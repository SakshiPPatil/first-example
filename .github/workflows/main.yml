# File: .github/workflows/deploy-to-ec2.yml
# This workflow deploys a Spring Boot application to an AWS EC2 instance.
# It includes running tests and using environment variables for the database.

name: Deploy Spring Boot App to EC2 (with Aurora)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    # Environment variables for the deployment process.
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: "ubuntu"
      APP_JAR_NAME: "demo-0.0.1-SNAPSHOT.jar"
      EC2_APP_PATH: "/home/ubuntu/app"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Step 1: Build the application and verify the JAR file exists.
      - name: Build with Maven and Verify JAR
        run: |
          echo "Building application with Maven..."
          mvn clean package -DskipTests
          if [ ! -f "target/${{ env.APP_JAR_NAME }}" ]; then
            echo "❌ Error: JAR file was not found after the build."
            exit 1
          fi
          echo "✅ JAR file found."

      # Step 2: Run unit and integration tests.
      - name: Run unit and integration tests
        run: |
          echo "Running Maven tests..."
          mvn test

      # Consolidated Step: Prepare the EC2 directory, transfer the files, and deploy the application.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Preparing EC2 directory..."
            # Create and set permissions for the deployment directory.
            mkdir -p ${{ env.EC2_APP_PATH }}
            sudo chown -R ${{ env.EC2_USER }}:${{ env.EC2_USER }} ${{ env.EC2_APP_PATH }}
            chmod 755 ${{ env.EC2_APP_PATH }}

            echo "Transferring and deploying application..."
            # Use 'tar' and 'ssh' to package and transfer the files in a single stream.
            # This is more reliable than a separate scp-action.
            tar -czf - target/ | ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "tar -xzf - -C ${{ env.EC2_APP_PATH }}"

            cd ${{ env.EC2_APP_PATH }}/target
            
            # Check if the file exists on the EC2 instance after transfer.
            if [ ! -f "${{ env.APP_JAR_NAME }}" ]; then
              echo "❌ Error: The JAR file was not found on the EC2 instance."
              exit 1
            fi
            
            echo "✅ JAR file found. Stopping old process and starting new one..."
            sudo fuser -k 8080/tcp || true
            
            export DB_URL="jdbc:mysql://backend.cluster-c854mo04o1n3.us-east-1.rds.amazonaws.com:3306/backend"
            export DB_USER="admin"
            export DB_PASS="admin123"
            
            # Start the application with environment variables.
            nohup java -jar ${{ env.APP_JAR_NAME }} > application.log 2>&1 &
            sleep 10
            
            # Check the status of the application.
            if sudo ss -ltnp | grep :8080; then
              echo "✅ Application successfully started on port 8080."
            else
              echo "❌ Application failed to start. Printing logs..."
              cat application.log
              exit 1
            fi
            
            echo "Deployment finished."
